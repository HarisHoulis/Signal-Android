project.afterEvaluate { project ->
    setupAndroidReporting(project)
}

def setupAndroidReporting(project) {
    tasks.withType(Test) {
        // Whether or not classes without source location should be instrumented
        jacoco.includeNoLocationClasses = true
        jacoco.excludes = ['jdk.internal.*']
    }

    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')
    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            System.out.println("Task -> $testTaskName")

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = [
                        // data binding
                        'android/databinding/**/*.class',
                        '**/android/databinding/*Binding.class',
                        '**/android/databinding/*',
                        '**/androidx/databinding/*',
                        '**/BR.*',
                        // android
                        '**/R.class',
                        '**/R$*.class',
                        '**/BuildConfig.*',
                        '**/Manifest*.*',
                        '**/*Test*.*',
                        'android/**/*.*',
                        // kotlin
                        '**/*MapperImpl*.*',
                        '**/*$ViewInjector*.*',
                        '**/*$ViewBinder*.*',
                        '**/BuildConfig.*',
                        '**/*Component*.*',
                        '**/*BR*.*',
                        '**/Manifest*.*',
                        '**/*$Lambda$*.*',
                        '**/*Companion*.*',
                        '**/*Module*.*',
                        '**/*Dagger*.*',
                        '**/*Hilt*.*',
                        '**/*MembersInjector*.*',
                        '**/*_MembersInjector.class',
                        '**/*_Factory*.*',
                        '**/*_Provide*Factory*.*',
                        '**/*Extensions*.*',
                        // sealed and data classes
                        '**/*$Result.*',
                        '**/*$Result$*.*',
                        // adapters generated by moshi
                        '**/*JsonAdapter.*',
                ]

                def javaTree = fileTree(dir: "${project.buildDir}/intermediates/javac/$sourceName/classes", excludes: fileFilter)
                def kotlinTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/$sourceName", excludes: fileFilter)
                classDirectories.from = files([javaTree], [kotlinTree])
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                def coverageSourceDirs = ["src/main/java",
                                          "src/$productFlavorName/java",
                                          "src/$buildTypeName/java"]

                sourceDirectories.setFrom(files(coverageSourceDirs))
                additionalSourceDirs.setFrom(files(coverageSourceDirs))

                reports {
                    xml.enabled true
                    html {
                        enabled false
                        destination file("${buildDir}/coverage-report")
                    }
                }
            }
        }
    }

    // Add a task to aggregate coverage reports
    task aggregateCoverageReports {
        group = "Reporting"
        description = "Aggregate JaCoCo coverage reports from all modules"

        // Get the list of subprojects excluding the app module
        def subprojects = project.subprojects.findAll { it.name != 'app' }

        // Set up tasks to copy and merge coverage data from each module
        subprojects.each { subproject ->
            def coverageTaskName = "test${subproject.name.capitalize()}UnitTestCoverage"
            def coverageDataDir = "${subproject.buildDir}/jacoco"

            // Copy coverage data from the module to app module
            task "copy${subproject.name.capitalize()}CoverageData"(type: Copy, dependsOn: coverageTaskName) {
                from fileTree(coverageDataDir)
                into "${project.rootProject.buildDir}/jacoco/${subproject.name}"
            }

            // Merge coverage data from each module
            task "merge${subproject.name.capitalize()}CoverageData"(type: JacocoMerge) {
                executionData fileTree("${project.rootProject.buildDir}/jacoco/${subproject.name}").include('**/*.exec')
                destinationFile file("${project.rootProject.buildDir}/jacoco/${subproject.name}/merged.exec")
            }

            // Set up task dependencies
            tasks.named("copy${subproject.name.capitalize()}CoverageData").configure {
                dependsOn(coverageTaskName)
            }
            tasks.named("merge${subproject.name.capitalize()}CoverageData").configure {
                dependsOn("copy${subproject.name.capitalize()}CoverageData")
            }
        }

        // Merge coverage data from all modules
        task mergeCoverageData(type: JacocoMerge) {
            def coverageDataDirs = subprojects.collect { "${project.rootProject.buildDir}/jacoco/${it.name}/merged.exec" }
            executionData fileTree(coverageDataDirs)
            destinationFile file("${project.rootProject.buildDir}/jacoco/merged.exec")
        }

        // Generate the aggregated coverage report
        task generateCoverageReport(type: JacocoReport, dependsOn: mergeCoverageData) {
            executionData fileTree("${project.rootProject.buildDir}/jacoco").include('**/*.exec')
            classDirectories.from = subprojects.collect { fileTree("${project.rootProject.buildDir}/jacoco/${it.name}/classes") }
            sourceDirectories.from = subprojects.collect { files("${it.projectDir}/src/main/java") }
            additionalSourceDirs.from = subprojects.collect { files("${it.projectDir}/src/main/java") }
            reports {
                xml.enabled true
                xml.destination file("${project.rootProject.buildDir}/jacoco/coverage.xml")
                html.enabled false
            }
        }
    }
}

android {
    buildTypes {
        debug {
            testCoverageEnabled true
        }
    }
}